<!--===========================================================================
  This is the build file for the Pentaho Agile BI Project
  
  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.
  
  See subfloor.xml for more details
============================================================================-->
<project name="PDI Hadoop Plugin" basedir="." default="dist" 
	xmlns:ivy="antlib:org.apache.ivy.ant" >
	
	<description>
	  This build file is used to create the Agile BI project
		and works with the subfloor.xml file.
	</description>

	<!-- Import the common_build.xml file which contains all the default tasks -->	
	<import file="build-res/subfloor-pkg.xml"/>

	<property name="libswt" location="libswt" />
	<property name="swt.os" location="win32" />
	<property name="pdiwithhadoopplugin"
					value="pdi-ce-hadoop" 
					description="Name of the pdi distribution with Hadoop plugin"/>
	
	<property name="libext.stage.dir" location="${stage.dir}/libext" />
	<property name="plugins.stage.dir" location="${stage.dir}/plugins" />
	
	<property name="plugin.destination" location="kettle-dist" />
	
	<path id="cp-meta">
	    <fileset dir="${libswt}" includes="*.jar" />
	    <fileset dir="${libswt}/${swt.os}/" includes="*.jar" />
	  </path>
	
	<!-- override compile.compile to include custom classpath and do resource copying -->
	<target name="compile.compile" depends="init">
	  <javac destdir="${classes.dir}"
	         debug="${javac.debug}"
	         deprecation="${javac.deprecation}"
	         fork="true"
	         source="${javac.source}"
	         target="${javac.target}">
	    <classpath>
	      <path refid="classpath" />
	      <path refid="cp-meta" />
	    </classpath>
	    <src path="${src.dir}" />
	  </javac>
	</target>
	
	<target name="resolve"
	          depends="resolve-default, resolve-test, ivy.check-releasable"
	          description="Retrieves all the dependent libraries" />

	<target name="dist-noresolve" depends="jar,package" description="Builds and packages the application" />
	<target name="dist" depends="resolve,jar,package" description="Builds and packages the application" />
	
	<target name="clean-dist">
		<delete dir="${dist.dir}" />
		<delete dir="${stage.dir}" />
		<delete dir="${platform.unzip.dir}" />
	</target>

    <!--
      AS STATED ABOVE, THE ONLY TASKS THAT SHOULD EXIST IN THIS BUILD FILE ARE
      THE TASKS THAT NEED TO DIFFER FROM THE DEFAULT IMPLEMENTATION OF THE TASKS
      FOUND IN subfloor.xml.
    --> 
	
  <target name="assemble.init">
    <mkdir dir="${stage.dir}" />
  </target>
	
  <target name="assemble" depends="assemble.init,assemble.copy-libs">
  	<delete>
		<fileset dir="${stage.dir}/plugins/${ivy.artifact.id}/lib">
			
			<!-- Exclude jars that are to be placed in Kettle's lib-ext dir -->
			<include name="hadoop-*.jar"/>
			<include name="pentaho-hdfs-vfs*.jar"/>
			
			<!-- first remove duplicate jars -->
			
			<!-- swt jars -->
			<include name="x86-*.jar"/>
			<include name="runtime-*.jar"/>
			<include name="common-*.jar"/>
			<include name="jface-*.jar"/>
			<include name="commands-*.jar"/>
			<!-- Pentaho's custom vfs browser -->
			<include name="*-vfs-browser-*.jar"/>
			<!-- servlet api -->
			<include name="servlet-api-*.jar"/>
			<!-- xul jars -->
			<include name="pentaho-xul-*.jar"/>
			<!-- kettle jars -->
			<include name="kettle-*.jar"/>
			<!-- jetty jars -->
			<include name="jetty-*.jar"/>
			<!-- reporting libcore and libformula -->
			<!-- spring core -->
  			<include name="spring-core*.jar"/>
			<!-- mondrian -->
			<include name="mondrian-*.jar"/>
			<include name="eigenbase-*.jar"/>
			<include name="commons-math-*.jar"/>
			<include name="javacup-*.jar"/>
			
			
			<!-- second, remove unnecessary jars -->

			<!-- batik -->
			<include name="batik-*.jar"/>
			<!-- jackrabbit -->
  			<include name="jackrabbit-*"/>
			<!-- jasperreports -->
  			<include name="jasperreports-*.jar"/>
			<!-- chartbeans -->
  			<include name="pentaho-chartbeans-*.jar"/>	
			<!-- hibernate -->
  			<include name="hibernate-*.jar"/>
			<!-- castor -->
  			<include name="castor-*.jar"/>
			<!-- derby -->
  			<include name="derby-*.jar"/>
			<!-- oracle driver -->
  			<include name="orai18n-*.jar"/>
			<include name="ojdbc-*.jar"/>
			<!-- mysql driver -->
  			<include name="mysql-connector-*.jar"/>
			<!-- hsqldb driver -->
  			<include name="hsqldb-*.jar"/>
			<!-- pentaho cwm -->
  			<include name="pentaho-cwm-*.jar"/>
			<!-- spring ldap -->
  			<include name="spring-ldap-*.jar"/>
			<!-- quartz -->
  			<include name="quartz-*.jar"/>
		    <!-- jpivot -->
		    <include name="jpivot-*.jar"/>

			<!-- generated by test-src/FindDuplicateJars.java -->
			<include name="activation-*.jar"/>
			<include name="commons-beanutils-*.jar"/>
			<include name="commons-codec-*.jar"/>
			<include name="commons-collections-*.jar"/>
			<include name="commons-dbcp-*.jar"/>
			<include name="commons-digester-*.jar"/>
			<include name="commons-fileupload-*.jar"/>
			<include name="commons-httpclient-*.jar"/>
			<include name="commons-lang-*.jar"/>
			<include name="commons-logging-*.jar"/>
			<include name="commons-net-*.jar"/>
			<include name="commons-pool-*.jar"/>
			<include name="commons-vfs-*.jar"/>
			<include name="dom4j-*.jar"/>
			<include name="feed4j-*.jar"/>
			<include name="georss-rome-*.jar"/>
			<include name="janino-*.jar"/>
			<include name="jaxen-*.jar"/>
			<include name="jcommon-*.jar"/>
			<include name="jfreechart-*.jar"/>
			<include name="js-*.jar"/>
			<include name="jug-lgpl-*.jar"/>
			<include name="junit-*.jar"/>
			<include name="jxl-*.jar"/>
			<include name="log4j-*.jar"/>
			<include name="mail-*.jar"/>
			<include name="nekohtml-*.jar"/>
			<include name="ognl-*.jar"/>
			<include name="pentaho-database-*.jar"/>
			<include name="rome-*.jar"/>
			<include name="salesforce-*.jar"/>
			<include name="simple-jndi-*.jar"/>
			<include name="spring-beans-*.jar"/>
			<include name="spring-context-*.jar"/>
			<include name="spring-context-support-*.jar"/>
			<include name="wsdl4j-*.jar"/>
			<include name="wstx-asl-*.jar"/>
			<include name="xercesImpl-*.jar"/>
			<include name="jmiutils-*.jar"/>
			<include name="xml-apis-*.jar"/>
			
			<exclude name="pentaho-database-model-*.jar"/>			

      <include name="openide-util-*.jar"/>
			<include name="xmlParserAPIs-*.jar"/>
      <include name="geronimo-stax-api-*.jar"/>
      <include name="stax-api*.jar"/>
			<include name="jtidy*.jar"/>
		</fileset>
  	</delete>
  </target>
	
	  <target name="assemble.copy-libs">
	  	<copy todir="${libext.stage.dir}/${ivy.artifact.id}">
          <fileset dir="${lib.dir}">
          	<!-- These files are required by the plugin to be in Kettle -->
          	<include name="hadoop-*.jar"/>
          	<include name="pentaho-hdfs-vfs-*.jar"/>
          </fileset>
	    </copy>
	    <copy todir="${plugins.stage.dir}/${ivy.artifact.id}/lib">
	      <fileset dir="${lib.dir}" />
	    </copy>
	    <copy todir="${plugins.stage.dir}/${ivy.artifact.id}">
	      <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar" />
	    </copy>
	  </target>

	<!-- this target builds a kettle release that includes the plugin -->
	<target name="kettle-w-plugin-dist">
		<unzip dest="${bin.dir}/kettle-dist">
			<fileset dir="${kettle.dist.dir}">
				<exclude name="*-javadoc-*.zip"/>
				<exclude name="*-src-*.zip"/>
				<include name="pdi-ce-*.zip"/>
			</fileset>
		</unzip>
		
		<available file="${bin.dir}/kettle-dist/data-integration" type="dir" property="plugin.destination" value="kettle-dist/data-integration" />

		<unzip dest="${bin.dir}/${plugin.destination}">
			<fileset dir="${dist.dir}">
				<include name="${package.basename}.zip"/>
			</fileset>
		</unzip>
		<zip destfile="${dist.dir}/${pdiwithhadoopplugin}.zip">
			<zipfileset dir="${bin.dir}/kettle-dist" />
		</zip>
	</target>
	
	<target name="install-plugin">
		<delete dir="${kettle.dist.dir}/libext/pdi-hadoop-plugin"/>
		<delete dir="${kettle.dist.dir}/plugins/pdi-hadoop-plugin"/>
		<unzip dest="${kettle.dist.dir}">
			<fileset file="${dist.dir}/${package.basename}.zip"/>
			</unzip>
	</target>
	
</project>
